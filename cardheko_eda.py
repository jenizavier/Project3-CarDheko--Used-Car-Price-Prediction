# -*- coding: utf-8 -*-
"""cardheko eda.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15dg4Q0cn-IjBFuj5VnhesdZwCNT4WBmk
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt


df = pd.read_csv('/content/df2.csv')

# 1. Univariate Analysis
# a. Histograms for numeric features
numeric_features = ['km', 'Acceleration',
                    'Displacement', 'Gross Weight', 'Height', 'Kerb Weight', 'Length', 'Max Power',
                    'Mileage', 'Torque', 'Top Speed', 'Width', 'price']

df[numeric_features].hist(figsize=(15, 15), bins=15, edgecolor='black')
plt.suptitle('Histograms of Numeric Features')
plt.show()

# b. Boxplots for numeric features
for feature in numeric_features:
    plt.figure(figsize=(10, 6))
    sns.boxplot(data=df, y=feature)
    plt.title(f'Boxplot of {feature}')
    plt.show()

# c. Distribution plots
#for feature in numeric_features:
   # plt.figure(figsize=(10, 6))
    #sns.histplot(df[feature], kde=True)
    #plt.title(f'Distribution of {feature}')
    #plt.show()

# d. Count plots for categorical features
categorical_features = ['City', 'Fuel Type', 'Transmission', 'Turbo Charger', 'Tyre Type',
                        'Value Configuration', 'Values per Cylinder']

for feature in categorical_features:
    plt.figure(figsize=(10, 6))
    sns.countplot(data=df, x=feature)
    plt.title(f'Count Plot of {feature}')
    plt.show()

# 2. Bivariate Analysis
# a. Scatter plots for numeric features
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='km', y='price', hue='Engine Type')
plt.title('Scatter Plot of Price vs. km')
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='Max Power', y='price', hue='City')
plt.title('Scatter Plot of Price vs. Max Power')
plt.show()

# b. Boxplots for numeric features by categorical features
for feature in numeric_features:
    plt.figure(figsize=(10, 6))
    sns.boxplot(data=df, x='City', y=feature)
    plt.title(f'Boxplot of {feature} by City')
    plt.show()



# d. Correlation heatmap
correlation_matrix = df[numeric_features].corr()
plt.figure(figsize=(12, 10))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)
plt.title('Correlation Heatmap')
plt.show()